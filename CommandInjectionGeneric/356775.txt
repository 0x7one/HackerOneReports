ReportLink:https://hackerone.com/reports/356775
WeaknessName:Command Injection - Generic
Reporter:https://hackerone.com/mikki_khan
ReportedTo:Dovecot(dovecot)
BountyAmount:
Severity:none
State:Closed
DateOfDisclosure:16.01.2019 17:03:45

Summary:

Quick Overview

 

I have found a Command Injection vulnerability in the code where a method calls an OS (Shell) command using an untrusted string to execute.

 

Introduction

 

Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.

 

Severity : High

 

Vulnerable Parameter : Server

 

PoC

 

Page1: core-master\src\util\rawlog.c

 

Line no. : 373     int main(int argc, char *argv[])

{

                                char *executable, *p;

                                enum rawlog_flags flags =RAWLOG_FLAG_LOG_INPUT | RAWLOG_FLAG_LOG_OUTPUT;

                                int c;

                                master_service = master_service_init("rawlog", 0,&argc, &argv, "+f:bIt");

                                while ((c = master_getopt(master_service)) > 0) {

                                switch (c) {

                                case 'f':

                                                if (strcmp(optarg, "in") == 0)

                                                                flags &= ~RAWLOG_FLAG_LOG_OUTPUT;

                                                else if (strcmp(optarg, "out") == 0)

                                                                flags &= ~RAWLOG_FLAG_LOG_INPUT;

                                                else

                                                                i_fatal("Invalid filter: %s", optarg);

                                                break;

                                case 'b':

                                                flags |= RAWLOG_FLAG_LOG_BOUNDARIES;

                                                break;

                                case 'I':

                                                flags |= RAWLOG_FLAG_LOG_IP_IN_FILENAME;

                                                break;

                                case 't':

                                                flags |= RAWLOG_FLAG_LOG_TIMESTAMPS;

                                                break;

                                default:

                                                return FATAL_DEFAULT;

                                }

                                }

                                argc -= optind;

                                argv += optind;

                                if (argc < 1)

                                i_fatal("Usage: rawlog [-f in | out] [-I] [-b] [-t] <binary> <arguments>");

                                master_service_init_log(master_service, "rawlog: ");

                                master_service_init_finish(master_service);

                                executable = argv[0];

                                rawlog_open(flags);

                                /* hide the executable path, it's ugly */

                                p = strrchr(argv[0], '/');

Line no.: 419      if (p != NULL) argv[0] = p+1;

Line no.: 420      execv(executable, argv)

 

In the above code of page1, the application’s main method calls an OS (Shell) command with execv, at line 420, using an untrusted string with the command to execute. This could allow an attacker to inject an arbitrary command and enable a command injection attack. The attacker may be able to inject the executed command via user input, argv, which is retrieved by the application in the main method at line 373 of page1.

 

Kindly confirm and revert in case of any queries.

## Impact

Impact:
An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application’s OS permissions, these could include:

·         File actions (read / create / modify / delete)

·         Open a network connection to the attacker’s server

·         Start and stop system services

·         Modify the running application

·         Complete server takeover