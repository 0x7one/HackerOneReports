ReportLink:https://hackerone.com/reports/537550
WeaknessName:Memory Corruption - Generic
Reporter:https://hackerone.com/nick_roessler
ReportedTo:Open-Xchange(open_xchange)
BountyAmount:5000.0
Severity:high
State:Closed
DateOfDisclosure:24.10.2019 6:38:32

Summary:

Hello Dovecot devs, this is a report from Nick Roessler and Rafi Rubin. We are researchers at the University of Pennsylvania. We’ve been fuzzing Dovecot and have triggered some memory errors---this one is the most serious, and can be used for controlled indirect out-of-bounds writes into heap memory.

## Summary:
  The imap_parser_read_string() function inside imap-parser.c sets the parser -> str_first_escape field equal to the index of the first ‘\’ escape character found when parsing the input data. However, it does not check for a null byte (end of string) when scanning that data. As a result, if a ‘\’ is placed _after_ a null byte in an input data, then the str_first_escape index may be larger than the strlen() of the actual data, which leads to out of bounds heap memory accesses (both reads and writes).

On line 266 of imap-parser.c, a new string is allocated from the memory pool of the parser, and a copy of the input data is copied there using p_strndup():

str = p_strndup(parser->pool, data+1, size-1);

p_strndup() computes the _length_ of the original string (distance to first null byte), allocates that many bytes, and then copies that many bytes into the allocated buffer. Several lines later the program calls str_unescape() on the shorter copied string using the original offset parser -> str_first_escape:

(void)str_unescape(str + parser->str_first_escape-1);

As noted, we can create inputs in which str_first_escape will have a larger value than the actual length of the string, thus driving str out of bounds in the input to str_unescape(). The p_strndup() allocates its memory from the parser memory pool; with an appropriate arrangement of the pool, this could be made to allocate from a block with a higher address than the data; because the distance between the ‘\’ and the null byte can be controlled by an attacker and is only constrained by the length of a line, the pointer can thus be set to a controlled value outside of the memory pool. str_unescape() performs writes, which could be used to corrupt arbitrary heap memory that is allocated after the pool, thus providing realistic footing for exploitation. Attached to this report are two screenshots from Address Sanitizer that show the state of the call stack and the detected out-of-bounds writes to heap objects.

## Releases Affected:

The affected code has not been touched since 2003 and the vulnerability may be older than that.

## Steps To Reproduce:

  1. Compile Dovecot with ASAN to detect memory errors, or add the assertion “i_assert(strlen(str) >= parser->str_first_escape);” after line 270 in imap-parser.c to detect violations of that logical invariant.
  2. Insert a ‘\0’ before the first ‘\\’ in a string that will be parsed by imap-parser.c --- example IMAP session provided below 
  3. Run session

Example session:
a0000 AUTHENTICATE PLAIN xxxxxxxxxxxxx
a0001 CAPABILITY
a0002 LIST "0\A" “”
a0006 CLOSE
a0007 LOGOUT

Note the 0 before “\A” would be an actual null byte not \x30.

## Fixing the vulnerability
The offset of the first escape should not be set higher than the offset of the null byte.  This could be achieved either by setting str_first_escape if it has not been set when the first ‘\0’ is encountered, or by terminating the processing (and maybe dropping the ill-behaved client) on that first ‘\0’ and leaving str_first_escape unset.  Given that we are not experts on this code and the nuances of the IMAP syntax, we can’t say which is more appropriate.

## Supporting Material/References:
This report includes two screenshots of Address Sanitizer reported out-of-bounds writes.

## Impact

This vulnerability allows for out-of-bounds writes to objects stored on the heap. One of the attached screenshots shows an ASAN report from a null byte write from line 76 of strescape.c; this alone can feasibly lead to arbitrary code execution, for example: https://bugs.chromium.org/p/project-zero/issues/detail?id=96

In this particular case, the attacker capabilities are much greater than a single null byte overflow. Not only can the write be controlled to skip over memory and write to an offset of the attacker’s choosing, but if heap memory contains ‘\’ bytes (which can be prepared by an attacker through previous IMAP session operations), then they will cause str_unescape() to perform a repeated series of writes as dictated by the logic of the function; attached is a screenshot showing out-of-bounds writes from line 73. Furthermore, this vulnerability can be triggered repeatedly within a single IMAP session, thus allowing quite sophisticated manipulation of heap memory. Once the state of memory can be corrupted this way in a complex program, arbitrary code execution should be assumed to be possible; all that remains is fitting the pieces together.