ReportLink:https://hackerone.com/reports/243470
WeaknessName:Information Disclosure
Reporter:https://hackerone.com/neex
ReportedTo:arxius(arxius)
BountyAmount:
Severity:
State:Closed
DateOfDisclosure:26.06.2017 23:28:09

Summary:

### Summary
The fix for https://hackerone.com/reports/242831 can be easily bypassed. It looks like you've banned `file://` substring, which is not enough.

### Repro steps
1. Download `gen_avi.py` (attached) and run the script like this:  `python3 gen_avi.py /etc/passwd must_sandbox_ffmpeg.avi.mp4`.
2. Visit https://arxius.io and upload `must_sandbox_ffmpeg.avi.mp4` that you've generated on previous step.
3. Wait until the processing finishes.
4. Play the video. You'll see the contents of `/etc/passwd`.

Example video that shows `/etc/passwd` is here:  https://arxius.io/v/f95dafb8. The video doesn't work in firefox for some reason, but you can always use `mplayer https://v.arxius.io/f95dafb8`.

Moreover, you can pass an HTTP link as second argument for `gen_avi.py`, which leads to SSRF. For example, you can generate a video like this: 
`python3 gen_avi.py http://example.com/ no_other_way.avi.mp4`, upload the resulting `no_other_way.avi.mp4`, and you'll see the html code for example.com: https://arxius.io/v/f29eda23 .

### How it works

As in #242831, the script creates an AVI that contains an HLS playlist inside GAB2. The playlist generated by this script looks like this:

```
#EXTM3U
#EXT-X-MEDIA-SEQUENCE:0
#EXTINF:1.0
GOD.txt
#EXTINF:1.0
/etc/passwd
#EXT-X-ENDLIST
```

There are several things to note about the way HLS playlists are processed:

1.  To process a playlist ffmpeg concatenates all segments and processes it as single file.
2.  To determine the type of this file FFmpeg uses the first segment of the playlist.
3.  FFmpeg processes `.txt` files in a special way. It tries to show a screen capture of a tty printing this file.

So, the playlist above will be processed as follows:

1. FFmpeg sees `#EXTM3U` signature inside GAB2 chunk and determines file type as HLS playlist.
2. The file `GOD.txt` doesn't even exist, but it's name is enough for FFmpeg to detect file type as `.txt`.
3. FFmpeg concatenates the contents of all segments of the playlist. As only one of two segments actually exists, the result of concatenation is just the contents of the file we want to retrieve.
4. Because the type of this concatenation is `.txt`, FFmpeg draws a tty that prints the file.

### Mitigation

Run ffmpeg inside some kind of sanbox.